# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main # Trigger the workflow on push to the main branch

# jobs:
#   build-and-push:
#     name: Build and Push Image
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Remove existing Docker Compose binary
#         run: sudo rm -f /usr/local/bin/docker-compose

#       - name: Install Docker Compose
#         run: |
#           DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)
#           sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#           sudo chmod +x /usr/local/bin/docker-compose

#       - name: Verify Docker Compose Installation
#         run: docker-compose --version

#       - name: Configure AWS CLI
#         run: |
#           aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws configure set region ${{ secrets.AWS_REGION }}

#       - name: Log in to Amazon ECR
#         run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

#       - name: Build Docker image
#         run: docker-compose -f docker-compose.yml -f docker-compose.prod.yml build

#       - name: Tag Docker image
#         run: docker tag be-prod:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

#       - name: Push Docker image to ECR
#         run: docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     needs: build-and-push # Wait for the build-and-push job to complete

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Deploy to EC2 via SSH
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ubuntu
#           key: ${{ secrets.EC2_KEY }}
#           script: |
#             # Log in to Amazon ECR
#             aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

#             # Stop all running containers
#             docker ps -q | xargs -r docker stop

#             # Pull the latest Docker image from ECR
#             docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

#             # Run the new container
#             docker run -d -p 80:8000 --env-file .env ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
