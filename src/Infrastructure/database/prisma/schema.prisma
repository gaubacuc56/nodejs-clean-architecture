// Define the datasource and generator
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
  schema          = "./src/Infrastructure/db/prisma/schema.prisma"
}

enum TASK_STATUS {
    TODO
    IN_PROGRESS
    FAILED
    FINISHED
    CLOSED
}

enum TASK_PRIORITY {
    LOW
    MEDIUM
    HIGH
}
model Task {
    id          String        @id @default(uuid())
    taskId      String        @unique
    title       String
    description String
    priority    TASK_PRIORITY @default(MEDIUM)
    status      TASK_STATUS   @default(TODO)
    Users       User[]
    SubTasks    SubTask[]
    createdAt   DateTime      @default(now()) @map("created_at")
    updatedAt   DateTime      @updatedAt @map("updated_at")
    isDeleted   Boolean       @default(false) @map("is_deleted")

    @@map("Task")
}

model SubTask {
    id        String   @id @default(uuid())
    taskId    String   @map("parent_id")
    content   String
    task      Task     @relation(fields: [taskId], references: [taskId], onDelete: Cascade, onUpdate: Cascade)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    isDeleted Boolean  @default(false) @map("is_deleted")

    @@map("SubTask")
}
enum Role {
    SUPER_ADMIN
    ADMIN
    USER
}

model User {
    id              String            @id @default(uuid())
    name            String
    email           String            @unique
    password        String
    resetKey        String?           @map("reset_key")
    resetKeyExpired DateTime?         @unique @map("reset_key_expired")
    role            Role              @default(USER)
    tasks           Task[]
    personalInfo    UserPersonalInfo?
    createdAt       DateTime          @default(now()) @map("created_at")
    updatedAt       DateTime          @updatedAt @map("updated_at")
    isDeleted       Boolean           @default(false) @map("is_deleted")

    @@map("User")
}

model UserPersonalInfo {
    id          String   @id @default(uuid())
    userId      String   @unique @map("user_id")
    firstName   String?  @map("first_name")
    lastName    String?  @map("last_name")
    phoneNumber String?  @map("phone_number")
    address     String?
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    isDeleted   Boolean  @default(false) @map("is_deleted")

    @@map("UserPersonalInfo")
}

